import json
import sqlite3
import asyncio
import logging
import sys
from os import getenv
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from aiogram.utils.payload import decode_payload, encode_payload
from aiogram.utils.text_decorations import markdown_decoration
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
import uvicorn

load_dotenv()
T_TOKEN = getenv("BOT_TOKEN")
X_TOKEN = getenv("MONOBANK_TOKEN")
VALIDATION_KEY = getenv("VALIDATION_KEY")
dp = Dispatcher()
app = FastAPI()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def db_connect():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    return conn

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def register_user(message: types.Message):
    conn = db_connect()
    cursor = conn.cursor()
    user_id = message.from_user.id
    username = message.from_user.username

    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    if cursor.fetchone():
        await message.reply("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
    else:
        cursor.execute("INSERT INTO users (id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
        await message.reply("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")

    conn.close()

# –Ü–Ω—ñ—Ü—ñ—é–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É —á–µ—Ä–µ–∑ Monobank
async def topup_balance(message: types.Message):
    url = "https://api.monobank.ua/api/merchant/invoice/create"
    payload = {
        "amount": 10000,
        "merchantPaymInfo": {
            "reference": "prepaid-10",
            "destination": "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ 100 –≥—Ä–∏–≤–µ–Ω—å",
            "comment": "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ 100 –≥—Ä–∏–≤–µ–Ω—å",
            "customerEmails": [],
            "basketOrder": [
                {
                    "name": "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ 100 –≥—Ä–∏–≤–µ–Ω—å",
                    "qty": 1,
                    "sum": 10000,
                    "total": 10000,
                    "code": "d21da1c47f3c45fca10a10c32518bdeb",
                    "icon": "https://www.ua-coins.info/images/coins/1943_obverse.jpg"
                }
            ]
        },
        "redirectUrl": "https://t.me/Maestro_Concerts_Bot",
        "webHookUrl": f"https://bot-2.misolla.io/callback_url/{message.from_user.username}",
        "code": "0a8637b3bccb42aa93fdeb791b8b58e9"
    }
    headers = {
        'X-Token': X_TOKEN
    }
    response = requests.request("POST", url, headers=headers, data=json.dumps(payload, indent=2))
    await message.answer(f"–î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{response.json()['pageUrl']}")

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    if " " in message.text:
        try:
            parameter = message.text.split(" ", 1)[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä
            payload = decode_payload(parameter)
            await message.answer(f"Your payload is {payload}")
        except Exception as e:
            await message.answer(f"üöî –ó–∞ –≤–∞–º–∏ –≤–∏—ó—Ö–∞–ª–∞ –∫—ñ–±–µ—Ä–ø–æ–ª—ñ—Ü—ñ—è")
    else:
        await message.answer(f"–í—ñ—Ç–∞—é, {markdown_decoration.bold(message.from_user.full_name)}!")



dp.message.register(register_user, Command(commands=["register"]))
dp.message.register(topup_balance, Command(commands=["topup"]))

# HTTP –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó –≤ –±–æ—Ç—ñ
@app.post("/callback_url/{user_name}")
async def perform_action(user_name, payload: dict):
    print(user_name)
    print(json.dumps(payload, indent=2))
    if payload["status"] == "success":
        conn = db_connect()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET balance = balance + ? WHERE username = ?", (100000, user_name))
        conn.commit()
        conn.close()

    return {"success": True}

bot = Bot(token=T_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))

async def start_polling():
    """–ó–∞–ø—É—Å–∫–∞—î polling –¥–ª—è aiogram –±–æ—Ç–∞"""
    await dp.start_polling(bot)

@app.on_event("startup")
async def on_startup():
    """–¶–µ–π –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É FastAPI"""
    asyncio.create_task(start_polling())  # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –¥–ª—è polling

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä—É —Ç–∞ aiogram –±–æ—Ç–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    uvicorn.run(app, host="localhost", port=8000)